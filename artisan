#!/usr/bin/env php
<?php

use Laravel\Ui\UiCommand;

define('LARAVEL_START', microtime(true));
define('DSEP', DIRECTORY_SEPARATOR);

require __DIR__ . '/vendor/autoload.php';

$configPath = implode(DSEP, [__DIR__, 'config']);
$config = require_once $configPath . DSEP . 'plugin_core.php';

if ($config === null) {
    throw new Exception("Nenhum arquivo de configuração válido foi encontrado em {$configPath}. Ele deve possuir os parâmetros 'plugin_namespace' e 'laravel_path'");
}

if (isset($config['laravel_path']) === false) {
    throw new Exception("O arquivo de configuração não possui o parâmetro 'laravel_path'");
}

class Kernel extends App\Console\Kernel
{
    protected function commands()
    {
        // Para adicionar comandos adicionais no artisan local
        $this->commands = [
            UiCommand::class, // descomente para usar o UI
        ];
        return parent::commands();
    }
}

class Application extends Illuminate\Foundation\Application
{
    public function usePluginNamespace(string $namespace)
    {
        $this->namespace = $namespace;
    }

    public function resourcePath($path = '')
    {
        return __DIR__ . DIRECTORY_SEPARATOR . 'resources' . ($path ? DIRECTORY_SEPARATOR . $path : $path);
    }
}

$app = new \Application(
    $_ENV['APP_BASE_PATH'] ?? __DIR__ . '/vendor/laravel/laravel'
);
$app->usePluginNamespace("App\\Plugin\\{$config['plugin_namespace']}\\");
$app->useAppPath(__DIR__ . '/app');
$app->useDatabasePath(__DIR__ . '/database');
$app->useStoragePath($config['laravel_path'] . '/storage');
$app->useEnvironmentPath($config['laravel_path']);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    \Kernel::class
);

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

// Faz o bootstrap dos ServicePrividers existentes na aplicação do Laravel
$kernel->bootstrap();

// Registra os novos ServiceProviders usados neste plugin
$app->register(App\Plugin\Core\Providers\ServiceProvider::class);
$app->register("App\\Plugin\\{$config['plugin_namespace']}\\Providers\\ServiceProvider");

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

$kernel->terminate($input, $status);
exit($status);
